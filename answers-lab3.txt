### Question 1
> What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

Having multiple handlers allows the kernel to react differently to depending on the cause of the exception/interrupt. 
This provides us the ability to monitor the privilege level of the code generating the exception and applying the proper restrictions to things like memory.
This also allows handler having its own stack space, important for the different sizes of trapframes while using the same struct. 


### Question 2
> Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), butsoftint’s code says int $14.Why should this produce interrupt vector 13? What happens if the kernel actually allows soft int’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

You do not have to do anything to the softint program to make the code function. This instruction is run by the user which does not have permission to cause an int 14.
When the CPU consumes this instruction it detects the privilege mismatch and issues a general protection which is directed to the trap 13. 


### Question 3
> The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call toSETGATEfromtrap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

When defining the IDT with SETGATE the final parameter sets the privilege level. 
If breakpoint is defined with a 3 it allows the user to generate a breakpoint interrupt.
If defined with a 0 it is restricted to the kernel, raising a general protection error.


### Question 4
> What do you think is the point of these mechanisms, particularly in light of what theuser/softinttest program does?

This gives the kernel a way to control acccess to specific interrupt handlers and code/memory privileges.
The user program should not be allowed to invoke the page fault interrupt as the user should have
no control nor access to virtual memory data structures. The softint demo shows the kernel intercepting
the user's attempt to access privileged information. 

